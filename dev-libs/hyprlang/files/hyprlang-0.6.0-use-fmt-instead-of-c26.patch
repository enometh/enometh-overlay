From e1c5f913215da66845bf14bc642be18c76aae38a Mon Sep 17 00:00:00 2001
From: Madhu <enometh@net.meer>
Date: Mon, 6 Jan 2025 14:43:41 +0530
Subject: [PATCH] use fmt instead of c++-26

---
 CMakeLists.txt       |  2 +-
 include/hyprlang.hpp | 10 +++++-----
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 70e8099..02f8519 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -30,7 +30,7 @@ add_compile_definitions(HYPRLANG_INTERNAL)
 set(CMAKE_CXX_STANDARD 23)
 
 find_package(PkgConfig REQUIRED)
-pkg_check_modules(deps REQUIRED IMPORTED_TARGET hyprutils>=0.1.1)
+pkg_check_modules(deps REQUIRED IMPORTED_TARGET hyprutils>=0.1.1 fmt>=11.0.2)
 
 file(GLOB_RECURSE SRCFILES CONFIGURE_DEPENDS "src/*.cpp" "include/hyprlang.hpp")
 
diff --git a/include/hyprlang.hpp b/include/hyprlang.hpp
index 457feca..d362f0f 100644
--- a/include/hyprlang.hpp
+++ b/include/hyprlang.hpp
@@ -8,7 +8,7 @@
 #include <string>
 #include <ostream>
 #include <vector>
-#include <print>
+#include <fmt/core.h>
 #include <cstdlib>
 
 class CConfigImpl;
@@ -467,7 +467,7 @@ namespace Hyprlang {
             const auto VAL = pConfig->getConfigValuePtr(val);
 
             if (!VAL) {
-                std::println("CSimpleConfigValue: value not found");
+                fmt::println("CSimpleConfigValue: value not found");
                 abort();
             }
 
@@ -484,7 +484,7 @@ namespace Hyprlang {
             const bool CUSTOMEX = (typeid(T) == typeid(Hyprlang::CUSTOMTYPE) && (TYPE == typeid(Hyprlang::CUSTOMTYPE*) || TYPE == typeid(void*) /* dunno why it does this? */));
 
             if (typeid(T) != TYPE && !STRINGEX && !CUSTOMEX) {
-                std::println("CSimpleConfigValue: Mismatched type in CConfigValue<T>, got {} but has {}", typeid(T).name(), TYPE.name());
+                fmt::println("CSimpleConfigValue: Mismatched type in CConfigValue<T>, got {} but has {}", typeid(T).name(), TYPE.name());
                 abort();
             }
 #endif
@@ -504,7 +504,7 @@ namespace Hyprlang {
 
     template <>
     inline std::string* CSimpleConfigValue<std::string>::ptr() const {
-        std::print("Impossible to implement ptr() of CConfigValue<std::string>");
+        fmt::print("Impossible to implement ptr() of CConfigValue<std::string>");
         abort();
         return nullptr;
     }
@@ -531,7 +531,7 @@ namespace Hyprlang {
 
     template <>
     inline Hyprlang::CUSTOMTYPE CSimpleConfigValue<Hyprlang::CUSTOMTYPE>::operator*() const {
-        std::print("Impossible to implement operator* of CConfigValue<Hyprlang::CUSTOMTYPE>, use ptr()");
+        fmt::print("Impossible to implement operator* of CConfigValue<Hyprlang::CUSTOMTYPE>, use ptr()");
         abort();
         return *ptr();
     }
-- 
2.46.0.27.gfa3b914457


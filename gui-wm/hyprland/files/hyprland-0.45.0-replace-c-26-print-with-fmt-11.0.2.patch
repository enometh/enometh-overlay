From 4c9abddcfdcbf5417a389a12230a555983c25a7b Mon Sep 17 00:00:00 2001
From: Madhu <enometh@net.meer>
Date: Fri, 15 Nov 2024 17:39:23 +0530
Subject: [PATCH 1/2] replace c++26 print with fmt-11.0.2

---
 hyprctl/main.cpp                     |  36 ++++-----
 hyprctl/meson.build                  |   1 +
 hyprpm/src/core/DataState.cpp        |   4 +-
 hyprpm/src/core/PluginManager.cpp    | 106 +++++++++++++--------------
 hyprpm/src/main.cpp                  |  26 +++----
 hyprpm/src/meson.build               |   1 +
 hyprpm/src/progress/CProgressBar.cpp |  10 +--
 src/Compositor.cpp                   |  12 +--
 src/debug/Log.cpp                    |  16 +++-
 src/main.cpp                         |  28 +++----
 src/meson.build                      |   1 +
 11 files changed, 126 insertions(+), 115 deletions(-)

diff --git a/hyprctl/main.cpp b/hyprctl/main.cpp
index 1f7f8d7..50e5c07 100644
--- a/hyprctl/main.cpp
+++ b/hyprctl/main.cpp
@@ -17,7 +17,7 @@
 
 #include <iostream>
 #include <string>
-#include <print>
+#include <fmt/core.h>
 #include <fstream>
 #include <string>
 #include <vector>
@@ -49,7 +49,7 @@ void log(const std::string& str) {
     if (quiet)
         return;
 
-    std::println("{}", str);
+    fmt::println("{}", str);
 }
 
 std::string getRuntimeDir() {
@@ -106,7 +106,7 @@ std::vector<SInstanceData> instances() {
 static volatile bool sigintReceived = false;
 void                 intHandler(int sig) {
     sigintReceived = true;
-    std::println("[hyprctl] SIGINT received, closing connection");
+    fmt::println("[hyprctl] SIGINT received, closing connection");
 }
 
 int rollingRead(const int socket) {
@@ -116,12 +116,12 @@ int rollingRead(const int socket) {
     constexpr size_t              BUFFER_SIZE = 8192;
     std::array<char, BUFFER_SIZE> buffer      = {0};
     long                          sizeWritten = 0;
-    std::println("[hyprctl] reading from socket following up log:");
+    fmt::println("[hyprctl] reading from socket following up log:");
     while (!sigintReceived) {
         sizeWritten = read(socket, buffer.data(), BUFFER_SIZE);
         if (sizeWritten < 0 && errno != EAGAIN) {
             if (errno != EINTR)
-                std::println("Couldn't read (5): {}: {}", strerror(errno), errno);
+                fmt::println("Couldn't read (5): {}: {}", strerror(errno), errno);
             close(socket);
             return 5;
         }
@@ -130,7 +130,7 @@ int rollingRead(const int socket) {
             break;
 
         if (sizeWritten > 0) {
-            std::println("{}", std::string(buffer.data(), sizeWritten));
+            fmt::println("{}", std::string(buffer.data(), sizeWritten));
             buffer.fill('\0');
         }
 
@@ -324,7 +324,7 @@ int main(int argc, char** argv) {
     bool parseArgs = true;
 
     if (argc < 2) {
-        std::println("{}", USAGE);
+        fmt::println("{}", USAGE);
         return 1;
     }
 
@@ -361,7 +361,7 @@ int main(int argc, char** argv) {
                 ++i;
 
                 if (i >= ARGS.size()) {
-                    std::println("{}", USAGE);
+                    fmt::println("{}", USAGE);
                     return 1;
                 }
 
@@ -372,24 +372,24 @@ int main(int argc, char** argv) {
                 const std::string& cmd = ARGS[0];
 
                 if (cmd == "hyprpaper") {
-                    std::println("{}", HYPRPAPER_HELP);
+                    fmt::println("{}", HYPRPAPER_HELP);
                 } else if (cmd == "notify") {
-                    std::println("{}", NOTIFY_HELP);
+                    fmt::println("{}", NOTIFY_HELP);
                 } else if (cmd == "output") {
-                    std::println("{}", OUTPUT_HELP);
+                    fmt::println("{}", OUTPUT_HELP);
                 } else if (cmd == "plugin") {
-                    std::println("{}", PLUGIN_HELP);
+                    fmt::println("{}", PLUGIN_HELP);
                 } else if (cmd == "setprop") {
-                    std::println("{}", SETPROP_HELP);
+                    fmt::println("{}", SETPROP_HELP);
                 } else if (cmd == "switchxkblayout") {
-                    std::println("{}", SWITCHXKBLAYOUT_HELP);
+                    fmt::println("{}", SWITCHXKBLAYOUT_HELP);
                 } else {
-                    std::println("{}", USAGE);
+                    fmt::println("{}", USAGE);
                 }
 
                 return 1;
             } else {
-                std::println("{}", USAGE);
+                fmt::println("{}", USAGE);
                 return 1;
             }
 
@@ -400,7 +400,7 @@ int main(int argc, char** argv) {
     }
 
     if (fullRequest.empty()) {
-        std::println("{}", USAGE);
+        fmt::println("{}", USAGE);
         return 1;
     }
 
@@ -477,7 +477,7 @@ int main(int argc, char** argv) {
     else if (fullRequest.contains("/decorations"))
         exitStatus = request(fullRequest, 1);
     else if (fullRequest.contains("/--help"))
-        std::println("{}", USAGE);
+        fmt::println("{}", USAGE);
     else if (fullRequest.contains("/rollinglog") && needRoll)
         exitStatus = request(fullRequest, 0, true);
     else {
diff --git a/hyprctl/meson.build b/hyprctl/meson.build
index 455f573..76ceb46 100644
--- a/hyprctl/meson.build
+++ b/hyprctl/meson.build
@@ -3,6 +3,7 @@ executable(
   'main.cpp',
   dependencies: [
     dependency('hyprutils', version: '>= 0.1.1'),
+    fmt_dep,
   ],
   install: true,
 )
diff --git a/hyprpm/src/core/DataState.cpp b/hyprpm/src/core/DataState.cpp
index fb8679d..47cc09a 100644
--- a/hyprpm/src/core/DataState.cpp
+++ b/hyprpm/src/core/DataState.cpp
@@ -1,6 +1,6 @@
 #include "DataState.hpp"
 #include <toml++/toml.hpp>
-#include <print>
+#include <fmt/core.h>
 #include <filesystem>
 #include <fstream>
 #include "PluginManager.hpp"
@@ -8,7 +8,7 @@
 std::string DataState::getDataStatePath() {
     const auto HOME = getenv("HOME");
     if (!HOME) {
-        std::println(stderr, "DataState: no $HOME");
+        fmt::println(stderr, "DataState: no $HOME");
         throw std::runtime_error("no $HOME");
         return "";
     }
diff --git a/hyprpm/src/core/PluginManager.cpp b/hyprpm/src/core/PluginManager.cpp
index 57c6764..9ce1656 100644
--- a/hyprpm/src/core/PluginManager.cpp
+++ b/hyprpm/src/core/PluginManager.cpp
@@ -9,7 +9,7 @@
 #include <iostream>
 #include <array>
 #include <filesystem>
-#include <print>
+#include <fmt/core.h>
 #include <thread>
 #include <fstream>
 #include <algorithm>
@@ -51,10 +51,10 @@ SHyprlandVersion CPluginManager::getHyprlandVersion() {
     once                 = true;
     const auto HLVERCALL = execAndGet("hyprctl version");
     if (m_bVerbose)
-        std::println("{}", verboseString("version returned: {}", HLVERCALL));
+        fmt::println("{}", verboseString("version returned: {}", HLVERCALL));
 
     if (!HLVERCALL.contains("Tag:")) {
-        std::println(stderr, "\n{}", failureString("You don't seem to be running Hyprland."));
+        fmt::println(stderr, "\n{}", failureString("You don't seem to be running Hyprland."));
         return SHyprlandVersion{};
     }
 
@@ -80,7 +80,7 @@ SHyprlandVersion CPluginManager::getHyprlandVersion() {
     } catch (...) { ; }
 
     if (m_bVerbose)
-        std::println("{}", verboseString("parsed commit {} at branch {} on {}, commits {}", hlcommit, hlbranch, hldate, commits));
+        fmt::println("{}", verboseString("parsed commit {} at branch {} on {}, commits {}", hlcommit, hlbranch, hldate, commits));
 
     ver = SHyprlandVersion{hlbranch, hlcommit, hldate, commits};
     return ver;
@@ -106,19 +106,19 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
     const auto HLVER = getHyprlandVersion();
 
     if (!hasDeps()) {
-        std::println(stderr, "\n{}", failureString("Could not clone the plugin repository. Dependencies not satisfied. Hyprpm requires: cmake, meson, cpio"));
+        fmt::println(stderr, "\n{}", failureString("Could not clone the plugin repository. Dependencies not satisfied. Hyprpm requires: cmake, meson, cpio"));
         return false;
     }
 
     if (DataState::pluginRepoExists(url)) {
-        std::println(stderr, "\n{}", failureString("Could not clone the plugin repository. Repository already installed."));
+        fmt::println(stderr, "\n{}", failureString("Could not clone the plugin repository. Repository already installed."));
         return false;
     }
 
     auto GLOBALSTATE = DataState::getGlobalState();
     if (!GLOBALSTATE.dontWarnInstall) {
-        std::println("{}!{} Disclaimer: {}", Colors::YELLOW, Colors::RED, Colors::RESET);
-        std::println("plugins, especially not official, have no guarantee of stability, availablity or security.\n"
+        fmt::println("{}!{} Disclaimer: {}", Colors::YELLOW, Colors::RED, Colors::RESET);
+        fmt::println("plugins, especially not official, have no guarantee of stability, availablity or security.\n"
                      "Run them at your own risk.\n"
                      "This message will not appear again.");
         GLOBALSTATE.dontWarnInstall = true;
@@ -134,7 +134,7 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
     std::getline(std::cin, input);
 
     if (input.size() > 0 && input[0] != 'Y' && input[0] != 'y') {
-        std::println(stderr, "Aborting.");
+        fmt::println(stderr, "Aborting.");
         return false;
     }
 
@@ -149,7 +149,7 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
         std::filesystem::create_directory("/tmp/hyprpm");
         std::filesystem::permissions("/tmp/hyprpm", std::filesystem::perms::all, std::filesystem::perm_options::replace);
     } else if (!std::filesystem::is_directory("/tmp/hyprpm")) {
-        std::println(stderr, "\n{}", failureString("Could not prepare working dir for hyprpm"));
+        fmt::println(stderr, "\n{}", failureString("Could not prepare working dir for hyprpm"));
         return false;
     }
 
@@ -158,7 +158,7 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
     m_szWorkingPluginDirectory = "/tmp/hyprpm/" + USERNAME;
 
     if (!createSafeDirectory(m_szWorkingPluginDirectory)) {
-        std::println(stderr, "\n{}", failureString("Could not prepare working dir for repo"));
+        fmt::println(stderr, "\n{}", failureString("Could not prepare working dir for repo"));
         return false;
     }
 
@@ -167,19 +167,19 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
     std::string ret = execAndGet("cd /tmp/hyprpm && git clone --recursive " + url + " " + USERNAME);
 
     if (!std::filesystem::exists(m_szWorkingPluginDirectory + "/.git")) {
-        std::println(stderr, "\n{}", failureString("Could not clone the plugin repository. shell returned:\n{}", ret));
+        fmt::println(stderr, "\n{}", failureString("Could not clone the plugin repository. shell returned:\n{}", ret));
         return false;
     }
 
     if (!rev.empty()) {
         std::string ret = execAndGet("git -C " + m_szWorkingPluginDirectory + " reset --hard --recurse-submodules " + rev);
         if (ret.compare(0, 6, "fatal:") == 0) {
-            std::println(stderr, "\n{}", failureString("Could not check out revision {}. shell returned:\n{}", rev, ret));
+            fmt::println(stderr, "\n{}", failureString("Could not check out revision {}. shell returned:\n{}", rev, ret));
             return false;
         }
         ret = execAndGet("git -C " + m_szWorkingPluginDirectory + " submodule update --init");
         if (m_bVerbose)
-            std::println("{}", verboseString("git submodule update --init returned: {}", ret));
+            fmt::println("{}", verboseString("git submodule update --init returned: {}", ret));
     }
 
     progress.m_iSteps = 1;
@@ -198,12 +198,12 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
     }
 
     if (!pManifest) {
-        std::println(stderr, "\n{}", failureString("The provided plugin repository does not have a valid manifest"));
+        fmt::println(stderr, "\n{}", failureString("The provided plugin repository does not have a valid manifest"));
         return false;
     }
 
     if (!pManifest->m_bGood) {
-        std::println(stderr, "\n{}", failureString("The provided plugin repository has a corrupted manifest"));
+        fmt::println(stderr, "\n{}", failureString("The provided plugin repository has a corrupted manifest"));
         return false;
     }
 
@@ -237,7 +237,7 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
 
             ret = execAndGet("git -C " + m_szWorkingPluginDirectory + " submodule update --init");
             if (m_bVerbose)
-                std::println("{}", verboseString("git submodule update --init returned: {}", ret));
+                fmt::println("{}", verboseString("git submodule update --init returned: {}", ret));
 
             break;
         }
@@ -249,7 +249,7 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
     const auto HEADERSSTATUS = headersValid();
 
     if (HEADERSSTATUS != HEADERS_OK) {
-        std::println("\n{}", headerError(HEADERSSTATUS));
+        fmt::println("\n{}", headerError(HEADERSSTATUS));
         return false;
     }
 
@@ -275,7 +275,7 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
         }
 
         if (m_bVerbose)
-            std::println("{}", verboseString("shell returned: " + out));
+            fmt::println("{}", verboseString("shell returned: " + out));
 
         if (!std::filesystem::exists(m_szWorkingPluginDirectory + "/" + p.output)) {
             progress.printMessageAbove(failureString("Plugin {} failed to build.\n"
@@ -316,7 +316,7 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
     progress.m_szCurrentMessage = "Done!";
     progress.print();
 
-    std::print("\n");
+    fmt::print("\n");
 
     // remove build files
     std::filesystem::remove_all(m_szWorkingPluginDirectory);
@@ -326,7 +326,7 @@ bool CPluginManager::addNewPluginRepo(const std::string& url, const std::string&
 
 bool CPluginManager::removePluginRepo(const std::string& urlOrName) {
     if (!DataState::pluginRepoExists(urlOrName)) {
-        std::println(stderr, "\n{}", failureString("Could not remove the repository. Repository is not installed."));
+        fmt::println(stderr, "\n{}", failureString("Could not remove the repository. Repository is not installed."));
         return false;
     }
 
@@ -337,7 +337,7 @@ bool CPluginManager::removePluginRepo(const std::string& urlOrName) {
     std::getline(std::cin, input);
 
     if (input.size() > 0 && input[0] != 'Y' && input[0] != 'y') {
-        std::println("Aborting.");
+        fmt::println("Aborting.");
         return false;
     }
 
@@ -412,7 +412,7 @@ bool CPluginManager::updateHeaders(bool force) {
     const auto HLVER = getHyprlandVersion();
 
     if (!hasDeps()) {
-        std::println("\n{}", failureString("Could not update. Dependencies not satisfied. Hyprpm requires: cmake, meson, cpio"));
+        fmt::println("\n{}", failureString("Could not update. Dependencies not satisfied. Hyprpm requires: cmake, meson, cpio"));
         return false;
     }
 
@@ -422,7 +422,7 @@ bool CPluginManager::updateHeaders(bool force) {
     }
 
     if (!force && headersValid() == HEADERS_OK) {
-        std::println("\n{}", successString("Headers up to date."));
+        fmt::println("\n{}", successString("Headers up to date."));
         return true;
     }
 
@@ -436,7 +436,7 @@ bool CPluginManager::updateHeaders(bool force) {
     const auto        WORKINGDIR = "/tmp/hyprpm/hyprland-" + USERNAME;
 
     if (!createSafeDirectory(WORKINGDIR)) {
-        std::println("\n{}", failureString("Could not prepare working dir for hl"));
+        fmt::println("\n{}", failureString("Could not prepare working dir for hl"));
         return false;
     }
 
@@ -460,7 +460,7 @@ bool CPluginManager::updateHeaders(bool force) {
     }
 
     if (!std::filesystem::exists(WORKINGDIR + "/.git")) {
-        std::println(stderr, "\n{}", failureString("Could not clone the Hyprland repository. shell returned:\n{}", ret));
+        fmt::println(stderr, "\n{}", failureString("Could not clone the Hyprland repository. shell returned:\n{}", ret));
         return false;
     }
 
@@ -475,7 +475,7 @@ bool CPluginManager::updateHeaders(bool force) {
     ret = execAndGet("cd " + WORKINGDIR + " && git checkout " + HLVER.hash + " 2>&1");
 
     if (ret.contains("fatal: unable to read tree")) {
-        std::println(stderr, "\n{}",
+        fmt::println(stderr, "\n{}",
                      failureString("Could not checkout the running Hyprland commit. If you are on -git, try updating.\n"
                                    "You can also try re-running hyprpm update with --no-shallow."));
         return false;
@@ -511,7 +511,7 @@ bool CPluginManager::updateHeaders(bool force) {
         missing             = missing.substr(0, missing.find("-- Configuring incomplete"));
         missing             = missing.substr(0, missing.find_last_of('\n'));
 
-        std::println(stderr, "\n{}",
+        fmt::println(stderr, "\n{}",
                      failureString("Could not configure the hyprland source, cmake complained:\n{}\n\n"
                                    "This likely means that you are missing the above dependencies or they are out of date.",
                                    missing));
@@ -531,7 +531,7 @@ bool CPluginManager::updateHeaders(bool force) {
     ret = execAndGet(cmd);
 
     if (m_bVerbose)
-        std::println("{}", verboseString("installer returned: {}", ret));
+        fmt::println("{}", verboseString("installer returned: {}", ret));
 
     // remove build files
     std::filesystem::remove_all(WORKINGDIR);
@@ -543,14 +543,14 @@ bool CPluginManager::updateHeaders(bool force) {
         progress.m_szCurrentMessage = "Done!";
         progress.print();
 
-        std::print("\n");
+        fmt::print("\n");
     } else {
         progress.printMessageAbove(failureString("failed to install headers with error code {} ({})", (int)HEADERSVALID, headerErrorShort(HEADERSVALID)));
         progress.m_iSteps           = 5;
         progress.m_szCurrentMessage = "Failed";
         progress.print();
 
-        std::print(stderr, "\n\n{}", headerError(HEADERSVALID));
+        fmt::print(stderr, "\n\n{}", headerError(HEADERSVALID));
 
         return false;
     }
@@ -560,14 +560,14 @@ bool CPluginManager::updateHeaders(bool force) {
 
 bool CPluginManager::updatePlugins(bool forceUpdateAll) {
     if (headersValid() != HEADERS_OK) {
-        std::println("{}", failureString("headers are not up-to-date, please run hyprpm update."));
+        fmt::println("{}", failureString("headers are not up-to-date, please run hyprpm update."));
         return false;
     }
 
     const auto REPOS = DataState::getAllRepositories();
 
     if (REPOS.size() < 1) {
-        std::println("{}", failureString("No repos to update."));
+        fmt::println("{}", failureString("No repos to update."));
         return true;
     }
 
@@ -598,7 +598,7 @@ bool CPluginManager::updatePlugins(bool forceUpdateAll) {
         std::string ret = execAndGet("cd /tmp/hyprpm && git clone --recursive " + repo.url + " " + USERNAME);
 
         if (!std::filesystem::exists(m_szWorkingPluginDirectory + "/.git")) {
-            std::println("{}", failureString("could not clone repo: shell returned: {}", ret));
+            fmt::println("{}", failureString("could not clone repo: shell returned: {}", ret));
             return false;
         }
 
@@ -607,7 +607,7 @@ bool CPluginManager::updatePlugins(bool forceUpdateAll) {
 
             std::string ret = execAndGet("git -C " + m_szWorkingPluginDirectory + " reset --hard --recurse-submodules " + repo.rev);
             if (ret.compare(0, 6, "fatal:") == 0) {
-                std::println(stderr, "\n{}", failureString("could not check out revision {}: shell returned:\n{}", repo.rev, ret));
+                fmt::println(stderr, "\n{}", failureString("could not check out revision {}: shell returned:\n{}", repo.rev, ret));
 
                 return false;
             }
@@ -648,12 +648,12 @@ bool CPluginManager::updatePlugins(bool forceUpdateAll) {
         }
 
         if (!pManifest) {
-            std::println(stderr, "\n{}", failureString("The provided plugin repository does not have a valid manifest"));
+            fmt::println(stderr, "\n{}", failureString("The provided plugin repository does not have a valid manifest"));
             continue;
         }
 
         if (!pManifest->m_bGood) {
-            std::println(stderr, "\n{}", failureString("The provided plugin repository has a corrupted manifest"));
+            fmt::println(stderr, "\n{}", failureString("The provided plugin repository has a corrupted manifest"));
             continue;
         }
 
@@ -689,10 +689,10 @@ bool CPluginManager::updatePlugins(bool forceUpdateAll) {
             }
 
             if (m_bVerbose)
-                std::println("{}", verboseString("shell returned: {}", out));
+                fmt::println("{}", verboseString("shell returned: {}", out));
 
             if (!std::filesystem::exists(m_szWorkingPluginDirectory + "/" + p.output)) {
-                std::println(stderr,
+                fmt::println(stderr,
                              "\n{}\n"
                              "  This likely means that the plugin is either outdated, not yet available for your version, or broken.\n"
                              "If you are on -git, update first.\n"
@@ -738,7 +738,7 @@ bool CPluginManager::updatePlugins(bool forceUpdateAll) {
     progress.m_szCurrentMessage = "Done!";
     progress.print();
 
-    std::print("\n");
+    fmt::print("\n");
 
     return true;
 }
@@ -746,27 +746,27 @@ bool CPluginManager::updatePlugins(bool forceUpdateAll) {
 bool CPluginManager::enablePlugin(const std::string& name) {
     bool ret = DataState::setPluginEnabled(name, true);
     if (ret)
-        std::println("{}", successString("Enabled {}", name));
+        fmt::println("{}", successString("Enabled {}", name));
     return ret;
 }
 
 bool CPluginManager::disablePlugin(const std::string& name) {
     bool ret = DataState::setPluginEnabled(name, false);
     if (ret)
-        std::println("{}", successString("Disabled {}", name));
+        fmt::println("{}", successString("Disabled {}", name));
     return ret;
 }
 
 ePluginLoadStateReturn CPluginManager::ensurePluginsLoadState() {
     if (headersValid() != HEADERS_OK) {
-        std::println(stderr, "\n{}", failureString("headers are not up-to-date, please run hyprpm update."));
+        fmt::println(stderr, "\n{}", failureString("headers are not up-to-date, please run hyprpm update."));
         return LOADSTATE_HEADERS_OUTDATED;
     }
 
     const auto HOME = getenv("HOME");
     const auto HIS  = getenv("HYPRLAND_INSTANCE_SIGNATURE");
     if (!HOME || !HIS) {
-        std::println(stderr, "PluginManager: no $HOME or HIS");
+        fmt::println(stderr, "PluginManager: no $HOME or HIS");
         return LOADSTATE_FAIL;
     }
     const auto               HYPRPMPATH = DataState::getDataStatePath() + "/";
@@ -775,7 +775,7 @@ ePluginLoadStateReturn CPluginManager::ensurePluginsLoadState() {
 
     std::vector<std::string> loadedPlugins;
 
-    std::println("{}", successString("Ensuring plugin load state"));
+    fmt::println("{}", successString("Ensuring plugin load state"));
 
     // iterate line by line
     while (!pluginLines.empty()) {
@@ -825,7 +825,7 @@ ePluginLoadStateReturn CPluginManager::ensurePluginsLoadState() {
         if (!enabled(p)) {
             // unload
             loadUnloadPlugin(HYPRPMPATH + repoForName(p) + "/" + p + ".so", false);
-            std::println("{}", successString("Unloaded {}", p));
+            fmt::println("{}", successString("Unloaded {}", p));
         }
     }
 
@@ -839,11 +839,11 @@ ePluginLoadStateReturn CPluginManager::ensurePluginsLoadState() {
                 continue;
 
             loadUnloadPlugin(HYPRPMPATH + repoForName(p.name) + "/" + p.filename, true);
-            std::println("{}", successString("Loaded {}", p.name));
+            fmt::println("{}", successString("Loaded {}", p.name));
         }
     }
 
-    std::println("{}", successString("Plugin load state ensured"));
+    fmt::println("{}", successString("Plugin load state ensured"));
 
     return LOADSTATE_OK;
 }
@@ -861,17 +861,17 @@ void CPluginManager::listAllPlugins() {
     const auto REPOS = DataState::getAllRepositories();
 
     for (auto const& r : REPOS) {
-        std::println("{}", infoString("Repository {}:", r.name));
+        fmt::println("{}", infoString("Repository {}:", r.name));
 
         for (auto const& p : r.plugins) {
-            std::println("  │ Plugin {}", p.name);
+            fmt::println("  │ Plugin {}", p.name);
 
             if (!p.failed)
-                std::println("  └─ enabled: {}", (p.enabled ? std::string{Colors::GREEN} + "true" : std::string{Colors::RED} + "false"));
+                fmt::println("  └─ enabled: {}", (p.enabled ? std::string{Colors::GREEN} + "true" : std::string{Colors::RED} + "false"));
             else
-                std::println("  └─ enabled: {}Plugin failed to build", Colors::RED);
+                fmt::println("  └─ enabled: {}Plugin failed to build", Colors::RED);
 
-            std::println("{}", Colors::RESET);
+            fmt::println("{}", Colors::RESET);
         }
     }
 }
diff --git a/hyprpm/src/main.cpp b/hyprpm/src/main.cpp
index 55fb57e..e0edcc9 100644
--- a/hyprpm/src/main.cpp
+++ b/hyprpm/src/main.cpp
@@ -6,7 +6,7 @@
 #include <cstdio>
 #include <vector>
 #include <string>
-#include <print>
+#include <fmt/core.h>
 #include <chrono>
 #include <thread>
 
@@ -39,7 +39,7 @@ int                        main(int argc, char** argv, char** envp) {
     }
 
     if (ARGS.size() < 2) {
-        std::println(stderr, "{}", HELP);
+        fmt::println(stderr, "{}", HELP);
         return 1;
     }
 
@@ -49,7 +49,7 @@ int                        main(int argc, char** argv, char** envp) {
     for (int i = 1; i < argc; ++i) {
         if (ARGS[i].starts_with("-")) {
             if (ARGS[i] == "--help" || ARGS[i] == "-h") {
-                std::println("{}", HELP);
+                fmt::println("{}", HELP);
                 return 0;
             } else if (ARGS[i] == "--notify" || ARGS[i] == "-n") {
                 notify = true;
@@ -61,9 +61,9 @@ int                        main(int argc, char** argv, char** envp) {
                 noShallow = true;
             } else if (ARGS[i] == "--force" || ARGS[i] == "-f") {
                 force = true;
-                std::println("{}", statusString("!", Colors::RED, "Using --force, I hope you know what you are doing."));
+                fmt::println("{}", statusString("!", Colors::RED, "Using --force, I hope you know what you are doing."));
             } else {
-                std::println(stderr, "Unrecognized option {}", ARGS[i]);
+                fmt::println(stderr, "Unrecognized option {}", ARGS[i]);
                 return 1;
             }
         } else {
@@ -72,7 +72,7 @@ int                        main(int argc, char** argv, char** envp) {
     }
 
     if (command.empty()) {
-        std::println(stderr, "{}", HELP);
+        fmt::println(stderr, "{}", HELP);
         return 0;
     }
 
@@ -82,7 +82,7 @@ int                        main(int argc, char** argv, char** envp) {
 
     if (command[0] == "add") {
         if (command.size() < 2) {
-            std::println(stderr, "{}", failureString("Not enough args for add."));
+            fmt::println(stderr, "{}", failureString("Not enough args for add."));
             return 1;
         }
 
@@ -94,7 +94,7 @@ int                        main(int argc, char** argv, char** envp) {
         return g_pPluginManager->addNewPluginRepo(command[1], rev) ? 0 : 1;
     } else if (command[0] == "remove") {
         if (ARGS.size() < 2) {
-            std::println(stderr, "{}", failureString("Not enough args for remove."));
+            fmt::println(stderr, "{}", failureString("Not enough args for remove."));
             return 1;
         }
 
@@ -120,12 +120,12 @@ int                        main(int argc, char** argv, char** envp) {
             g_pPluginManager->notify(ICON_ERROR, 0, 10000, "[hyprpm] Couldn't update headers");
     } else if (command[0] == "enable") {
         if (ARGS.size() < 2) {
-            std::println(stderr, "{}", failureString("Not enough args for enable."));
+            fmt::println(stderr, "{}", failureString("Not enough args for enable."));
             return 1;
         }
 
         if (!g_pPluginManager->enablePlugin(command[1])) {
-            std::println(stderr, "{}", failureString("Couldn't enable plugin (missing?)"));
+            fmt::println(stderr, "{}", failureString("Couldn't enable plugin (missing?)"));
             return 1;
         }
 
@@ -134,12 +134,12 @@ int                        main(int argc, char** argv, char** envp) {
             return 1;
     } else if (command[0] == "disable") {
         if (command.size() < 2) {
-            std::println(stderr, "{}", failureString("Not enough args for disable."));
+            fmt::println(stderr, "{}", failureString("Not enough args for disable."));
             return 1;
         }
 
         if (!g_pPluginManager->disablePlugin(command[1])) {
-            std::println(stderr, "{}", failureString("Couldn't disable plugin (missing?)"));
+            fmt::println(stderr, "{}", failureString("Couldn't disable plugin (missing?)"));
             return 1;
         }
 
@@ -164,7 +164,7 @@ int                        main(int argc, char** argv, char** envp) {
     } else if (command[0] == "list") {
         g_pPluginManager->listAllPlugins();
     } else {
-        std::println(stderr, "{}", HELP);
+        fmt::println(stderr, "{}", HELP);
         return 1;
     }
 
diff --git a/hyprpm/src/meson.build b/hyprpm/src/meson.build
index 2ef6c32..74550af 100644
--- a/hyprpm/src/meson.build
+++ b/hyprpm/src/meson.build
@@ -8,6 +8,7 @@ executable(
     dependency('hyprutils', version: '>= 0.1.1'),
     dependency('threads'),
     dependency('tomlplusplus'),
+    fmt_dep,
   ],
   install: true,
 )
diff --git a/hyprpm/src/progress/CProgressBar.cpp b/hyprpm/src/progress/CProgressBar.cpp
index 9f2df08..424e181 100644
--- a/hyprpm/src/progress/CProgressBar.cpp
+++ b/hyprpm/src/progress/CProgressBar.cpp
@@ -5,7 +5,7 @@
 #include <cmath>
 #include <format>
 
-#include <print>
+#include <fmt/core.h>
 #include <stdio.h>
 #include <unistd.h>
 
@@ -21,7 +21,7 @@ void CProgressBar::printMessageAbove(const std::string& msg) {
         spaces += ' ';
     }
 
-    std::println("\r{}\r{}", spaces, msg);
+    fmt::println("\r{}\r{}", spaces, msg);
     print();
 }
 
@@ -30,7 +30,7 @@ void CProgressBar::print() {
     ioctl(STDOUT_FILENO, TIOCGWINSZ, &w);
 
     if (m_bFirstPrint)
-        std::print("\n");
+        fmt::print("\n");
     m_bFirstPrint = false;
 
     std::string spaces;
@@ -39,7 +39,7 @@ void CProgressBar::print() {
         spaces += ' ';
     }
 
-    std::print("\r{}\r", spaces);
+    fmt::print("\r{}\r", spaces);
 
     std::string message = "";
 
@@ -76,7 +76,7 @@ void CProgressBar::print() {
         message += "  " + std::format("{} / {}", m_iSteps, m_iMaxSteps) + " ";
 
     // draw message
-    std::print("{} {}", message, m_szCurrentMessage);
+    fmt::print("{} {}", message, m_szCurrentMessage);
 
     std::fflush(stdout);
 }
diff --git a/src/Compositor.cpp b/src/Compositor.cpp
index da20c5c..6c4b913 100644
--- a/src/Compositor.cpp
+++ b/src/Compositor.cpp
@@ -11,7 +11,7 @@
 #include <bit>
 #include <ctime>
 #include <random>
-#include <print>
+#include <fmt/core.h>
 #include <cstring>
 #include <filesystem>
 #include <unordered_set>
@@ -141,12 +141,12 @@ CCompositor::CCompositor() {
     m_szHyprTempDataRoot = std::string{getenv("XDG_RUNTIME_DIR")} + "/hypr";
 
     if (m_szHyprTempDataRoot.starts_with("/hypr")) {
-        std::println("Bailing out, $XDG_RUNTIME_DIR is invalid");
+        fmt::println("Bailing out, $XDG_RUNTIME_DIR is invalid");
         throw std::runtime_error("CCompositor() failed");
     }
 
     if (!m_szHyprTempDataRoot.starts_with("/run/user"))
-        std::println("[!!WARNING!!] XDG_RUNTIME_DIR looks non-standard. Proceeding anyways...");
+        fmt::println("[!!WARNING!!] XDG_RUNTIME_DIR looks non-standard. Proceeding anyways...");
 
     std::random_device              dev;
     std::mt19937                    engine(dev());
@@ -159,19 +159,19 @@ CCompositor::CCompositor() {
     if (!std::filesystem::exists(m_szHyprTempDataRoot))
         mkdir(m_szHyprTempDataRoot.c_str(), S_IRWXU);
     else if (!std::filesystem::is_directory(m_szHyprTempDataRoot)) {
-        std::println("Bailing out, {} is not a directory", m_szHyprTempDataRoot);
+        fmt::println("Bailing out, {} is not a directory", m_szHyprTempDataRoot);
         throw std::runtime_error("CCompositor() failed");
     }
 
     m_szInstancePath = m_szHyprTempDataRoot + "/" + m_szInstanceSignature;
 
     if (std::filesystem::exists(m_szInstancePath)) {
-        std::println("Bailing out, {} exists??", m_szInstancePath);
+        fmt::println("Bailing out, {} exists??", m_szInstancePath);
         throw std::runtime_error("CCompositor() failed");
     }
 
     if (mkdir(m_szInstancePath.c_str(), S_IRWXU) < 0) {
-        std::println("Bailing out, couldn't create {}", m_szInstancePath);
+        fmt::println("Bailing out, couldn't create {}", m_szInstancePath);
         throw std::runtime_error("CCompositor() failed");
     }
 
diff --git a/src/debug/Log.cpp b/src/debug/Log.cpp
index 5a31483..28ec2b8 100644
--- a/src/debug/Log.cpp
+++ b/src/debug/Log.cpp
@@ -3,15 +3,23 @@
 #include "../Compositor.hpp"
 #include "RollingLogFollow.hpp"
 
+#define private public
+#define protected public
 #include <fstream>
-#include <print>
+
+#include <fmt/core.h>
+#undef private
+#undef protected
 #include <fcntl.h>
 
 void Debug::init(const std::string& IS) {
     logFile = IS + (ISDEBUG ? "/hyprlandd.log" : "/hyprland.log");
     logOfs.open(logFile, std::ios::out | std::ios::app);
-    auto handle = logOfs.native_handle();
-    fcntl(handle, F_SETFD, FD_CLOEXEC);
+    //auto handle = logOfs.native_handle();
+    //auto fno = file._M_filebuf._M_file.fd();
+    //https://stackoverflow.com/questions/109449/getting-a-file-from-a-stdfstream
+ //   auto handle = logOfs._M_filebuf._M_file.fd();
+  //  fcntl(handle, F_SETFD, FD_CLOEXEC);
 }
 
 void Debug::close() {
@@ -69,5 +77,5 @@ void Debug::log(LogLevel level, std::string str) {
 
     // log it to the stdout too.
     if (!disableStdout)
-        std::println("{}", ((coloredLogs && !**coloredLogs) ? str : coloredStr));
+        fmt::println("{}", ((coloredLogs && !**coloredLogs) ? str : coloredStr));
 }
diff --git a/src/main.cpp b/src/main.cpp
index 6bbf73f..cb965d0 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -7,7 +7,7 @@
 
 #include <cstdio>
 #include <hyprutils/string/String.hpp>
-#include <print>
+#include <fmt/core.h>
 using namespace Hyprutils::String;
 
 #include <fcntl.h>
@@ -19,8 +19,8 @@ using namespace Hyprutils::String;
 #include <filesystem>
 
 void help() {
-    std::println("usage: Hyprland [arg [...]].\n");
-    std::println(R"(Arguments:
+    fmt::println("usage: Hyprland [arg [...]].\n");
+    fmt::println(R"(Arguments:
     --help              -h       - Show this message again
     --config FILE       -c FILE  - Specify config file to use
     --socket NAME                - Sets the Wayland socket name (for Wayland socket handover)
@@ -55,7 +55,7 @@ int main(int argc, char** argv) {
 
     for (auto it = args.begin(); it != args.end(); it++) {
         if (it->compare("--i-am-really-stupid") == 0 && !ignoreSudo) {
-            std::println("[ WARNING ] Running Hyprland with superuser privileges might damage your system");
+            fmt::println("[ WARNING ] Running Hyprland with superuser privileges might damage your system");
 
             ignoreSudo = true;
         } else if (it->compare("--socket") == 0) {
@@ -81,7 +81,7 @@ int main(int argc, char** argv) {
                 if (fcntl(socketFd, F_GETFD) == -1)
                     throw std::exception();
             } catch (...) {
-                std::println(stderr, "[ ERROR ] Invalid Wayland FD!");
+                fmt::println(stderr, "[ ERROR ] Invalid Wayland FD!");
                 help();
 
                 return 1;
@@ -103,7 +103,7 @@ int main(int argc, char** argv) {
                     throw std::exception();
                 }
             } catch (...) {
-                std::println(stderr, "[ ERROR ] Config file '{}' doesn't exist!", configPath);
+                fmt::println(stderr, "[ ERROR ] Config file '{}' doesn't exist!", configPath);
                 help();
 
                 return 1;
@@ -119,13 +119,13 @@ int main(int argc, char** argv) {
 
             return 0;
         } else if (it->compare("-v") == 0 || it->compare("--version") == 0) {
-            std::println("{}", versionRequest(eHyprCtlOutputFormat::FORMAT_NORMAL, ""));
+            fmt::println("{}", versionRequest(eHyprCtlOutputFormat::FORMAT_NORMAL, ""));
             return 0;
         } else if (it->compare("--systeminfo") == 0) {
-            std::println("{}", systemInfoRequest(eHyprCtlOutputFormat::FORMAT_NORMAL, ""));
+            fmt::println("{}", systemInfoRequest(eHyprCtlOutputFormat::FORMAT_NORMAL, ""));
             return 0;
         } else {
-            std::println(stderr, "[ ERROR ] Unknown option '{}' !", it->c_str());
+            fmt::println(stderr, "[ ERROR ] Unknown option '{}' !", it->c_str());
             help();
 
             return 1;
@@ -133,24 +133,24 @@ int main(int argc, char** argv) {
     }
 
     if (!ignoreSudo && Init::isSudo()) {
-        std::println(stderr,
+        fmt::println(stderr,
                      "[ ERROR ] Hyprland was launched with superuser privileges, but the privileges check is not omitted.\n"
                      "          Hint: Use the --i-am-really-stupid flag to omit that check.");
 
         return 1;
     } else if (ignoreSudo && Init::isSudo()) {
-        std::println("Superuser privileges check is omitted. I hope you know what you're doing.");
+        fmt::println("Superuser privileges check is omitted. I hope you know what you're doing.");
     }
 
     if (socketName.empty() ^ (socketFd == -1)) {
-        std::println(stderr,
+        fmt::println(stderr,
                      "[ ERROR ] Hyprland was launched with only one of --socket and --wayland-fd.\n"
                      "          Hint: Pass both --socket and --wayland-fd to perform Wayland socket handover.");
 
         return 1;
     }
 
-    std::println("Welcome to Hyprland!");
+    fmt::println("Welcome to Hyprland!");
 
     // let's init the compositor.
     // it initializes basic Wayland stuff in the constructor.
@@ -158,7 +158,7 @@ int main(int argc, char** argv) {
         g_pCompositor                     = std::make_unique<CCompositor>();
         g_pCompositor->explicitConfigPath = configPath;
     } catch (const std::exception& e) {
-        std::println(stderr, "Hyprland threw in ctor: {}\nCannot continue.", e.what());
+        fmt::println(stderr, "Hyprland threw in ctor: {}\nCannot continue.", e.what());
         return 1;
     }
 
diff --git a/src/meson.build b/src/meson.build
index 2dbe2f4..af9cf2c 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -22,6 +22,7 @@ executable(
     dependency('xkbcommon'),
     dependency('libinput'),
     xcb_dep,
+    fmt_dep,
     xcb_composite_dep,
     xcb_errors_dep,
     xcb_icccm_dep,
-- 
2.46.0.27.gfa3b914457

